//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/_Project/Scripts/Controls/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Normal"",
            ""id"": ""2bfa3b6a-da66-4eb6-aa5d-294c7adb8e77"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""45d503bc-5915-4f4e-a2d0-3e6ec60aa2c3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""72d76301-6dd8-48d9-a0fb-9b1662144f8a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""04065471-9ccc-421e-a952-08fda5112e6f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""c14024e3-5470-4356-9c10-7024916d9da1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EnableCamera"",
                    ""type"": ""Button"",
                    ""id"": ""1845b47e-0935-4150-9775-0ad250b5c972"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Book"",
                    ""type"": ""Button"",
                    ""id"": ""e37ec065-5219-4a34-9c9b-57ced8baa8a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""10c268af-bfe7-4648-ba61-e78e05e11ef5"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2a355fc5-8a02-4874-a7d7-1dcc22b863be"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""04f3abd0-972b-4c2b-aff8-553093f54424"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""fcb2fdfc-22ef-4491-897c-1fdc0c0c3fb1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0a173a56-f521-445c-8a65-c192d8b53ef2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""01324927-ed08-4d81-877e-967a19520b31"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""379bb109-811d-4892-871c-c37ac724bb30"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""58a60891-59b0-4c65-bdf6-3a98cbca91e5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e6974895-ddc7-41a8-9774-ab018d586759"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""EnableCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b73a6f32-8f8e-44bd-aeca-582931609f11"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Book"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""7f124944-5e11-4ab6-b64f-2f933505d4c6"",
            ""actions"": [
                {
                    ""name"": ""Capture"",
                    ""type"": ""Button"",
                    ""id"": ""f9c9288b-77bf-47e8-acdd-245c01e7cff1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""PassThrough"",
                    ""id"": ""60e6fae6-3ba3-4aa8-a914-273d4658c5e0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""94f4da74-d52c-4251-9f4d-dfc9074a848a"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Capture"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5461177c-5600-4181-ab56-5039cae7465d"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ChatBox"",
            ""id"": ""a8ddf400-7384-4b99-8691-ce40bef3bc95"",
            ""actions"": [
                {
                    ""name"": ""DiscardChatBox"",
                    ""type"": ""Button"",
                    ""id"": ""be8328dd-36ba-40c9-a5e9-336706a9f8dd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""417b1af9-cbd4-4b49-ad68-93d232d71cb5"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DiscardChatBox"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Normal
        m_Normal = asset.FindActionMap("Normal", throwIfNotFound: true);
        m_Normal_Move = m_Normal.FindAction("Move", throwIfNotFound: true);
        m_Normal_Look = m_Normal.FindAction("Look", throwIfNotFound: true);
        m_Normal_Run = m_Normal.FindAction("Run", throwIfNotFound: true);
        m_Normal_Jump = m_Normal.FindAction("Jump", throwIfNotFound: true);
        m_Normal_EnableCamera = m_Normal.FindAction("EnableCamera", throwIfNotFound: true);
        m_Normal_Book = m_Normal.FindAction("Book", throwIfNotFound: true);
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_Capture = m_Camera.FindAction("Capture", throwIfNotFound: true);
        m_Camera_Zoom = m_Camera.FindAction("Zoom", throwIfNotFound: true);
        // ChatBox
        m_ChatBox = asset.FindActionMap("ChatBox", throwIfNotFound: true);
        m_ChatBox_DiscardChatBox = m_ChatBox.FindAction("DiscardChatBox", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Normal
    private readonly InputActionMap m_Normal;
    private INormalActions m_NormalActionsCallbackInterface;
    private readonly InputAction m_Normal_Move;
    private readonly InputAction m_Normal_Look;
    private readonly InputAction m_Normal_Run;
    private readonly InputAction m_Normal_Jump;
    private readonly InputAction m_Normal_EnableCamera;
    private readonly InputAction m_Normal_Book;
    public struct NormalActions
    {
        private @Controls m_Wrapper;
        public NormalActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Normal_Move;
        public InputAction @Look => m_Wrapper.m_Normal_Look;
        public InputAction @Run => m_Wrapper.m_Normal_Run;
        public InputAction @Jump => m_Wrapper.m_Normal_Jump;
        public InputAction @EnableCamera => m_Wrapper.m_Normal_EnableCamera;
        public InputAction @Book => m_Wrapper.m_Normal_Book;
        public InputActionMap Get() { return m_Wrapper.m_Normal; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NormalActions set) { return set.Get(); }
        public void SetCallbacks(INormalActions instance)
        {
            if (m_Wrapper.m_NormalActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_NormalActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_NormalActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_NormalActionsCallbackInterface.OnMove;
                @Look.started -= m_Wrapper.m_NormalActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_NormalActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_NormalActionsCallbackInterface.OnLook;
                @Run.started -= m_Wrapper.m_NormalActionsCallbackInterface.OnRun;
                @Run.performed -= m_Wrapper.m_NormalActionsCallbackInterface.OnRun;
                @Run.canceled -= m_Wrapper.m_NormalActionsCallbackInterface.OnRun;
                @Jump.started -= m_Wrapper.m_NormalActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_NormalActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_NormalActionsCallbackInterface.OnJump;
                @EnableCamera.started -= m_Wrapper.m_NormalActionsCallbackInterface.OnEnableCamera;
                @EnableCamera.performed -= m_Wrapper.m_NormalActionsCallbackInterface.OnEnableCamera;
                @EnableCamera.canceled -= m_Wrapper.m_NormalActionsCallbackInterface.OnEnableCamera;
                @Book.started -= m_Wrapper.m_NormalActionsCallbackInterface.OnBook;
                @Book.performed -= m_Wrapper.m_NormalActionsCallbackInterface.OnBook;
                @Book.canceled -= m_Wrapper.m_NormalActionsCallbackInterface.OnBook;
            }
            m_Wrapper.m_NormalActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @EnableCamera.started += instance.OnEnableCamera;
                @EnableCamera.performed += instance.OnEnableCamera;
                @EnableCamera.canceled += instance.OnEnableCamera;
                @Book.started += instance.OnBook;
                @Book.performed += instance.OnBook;
                @Book.canceled += instance.OnBook;
            }
        }
    }
    public NormalActions @Normal => new NormalActions(this);

    // Camera
    private readonly InputActionMap m_Camera;
    private ICameraActions m_CameraActionsCallbackInterface;
    private readonly InputAction m_Camera_Capture;
    private readonly InputAction m_Camera_Zoom;
    public struct CameraActions
    {
        private @Controls m_Wrapper;
        public CameraActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Capture => m_Wrapper.m_Camera_Capture;
        public InputAction @Zoom => m_Wrapper.m_Camera_Zoom;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void SetCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterface != null)
            {
                @Capture.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnCapture;
                @Capture.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnCapture;
                @Capture.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnCapture;
                @Zoom.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnZoom;
                @Zoom.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnZoom;
                @Zoom.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnZoom;
            }
            m_Wrapper.m_CameraActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Capture.started += instance.OnCapture;
                @Capture.performed += instance.OnCapture;
                @Capture.canceled += instance.OnCapture;
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
            }
        }
    }
    public CameraActions @Camera => new CameraActions(this);

    // ChatBox
    private readonly InputActionMap m_ChatBox;
    private IChatBoxActions m_ChatBoxActionsCallbackInterface;
    private readonly InputAction m_ChatBox_DiscardChatBox;
    public struct ChatBoxActions
    {
        private @Controls m_Wrapper;
        public ChatBoxActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @DiscardChatBox => m_Wrapper.m_ChatBox_DiscardChatBox;
        public InputActionMap Get() { return m_Wrapper.m_ChatBox; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ChatBoxActions set) { return set.Get(); }
        public void SetCallbacks(IChatBoxActions instance)
        {
            if (m_Wrapper.m_ChatBoxActionsCallbackInterface != null)
            {
                @DiscardChatBox.started -= m_Wrapper.m_ChatBoxActionsCallbackInterface.OnDiscardChatBox;
                @DiscardChatBox.performed -= m_Wrapper.m_ChatBoxActionsCallbackInterface.OnDiscardChatBox;
                @DiscardChatBox.canceled -= m_Wrapper.m_ChatBoxActionsCallbackInterface.OnDiscardChatBox;
            }
            m_Wrapper.m_ChatBoxActionsCallbackInterface = instance;
            if (instance != null)
            {
                @DiscardChatBox.started += instance.OnDiscardChatBox;
                @DiscardChatBox.performed += instance.OnDiscardChatBox;
                @DiscardChatBox.canceled += instance.OnDiscardChatBox;
            }
        }
    }
    public ChatBoxActions @ChatBox => new ChatBoxActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface INormalActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnEnableCamera(InputAction.CallbackContext context);
        void OnBook(InputAction.CallbackContext context);
    }
    public interface ICameraActions
    {
        void OnCapture(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
    }
    public interface IChatBoxActions
    {
        void OnDiscardChatBox(InputAction.CallbackContext context);
    }
}
